---
title: "CEVE 101: Project 03"
author: "Ashley Nunez agn7" # CHANGE THIS
date: "2024-10-23"

# do not change anything below this line
engine: julia
code-annotations: hover
format:
    html: default
    docx: default
---

We begin by loading the required packages.

```{julia}
using Revise                      # <1>
using RainwaterHarvesting         # <2>
```

1. `Revise` allows us to update code without restarting Julia.
2. We load the `RainwaterHarvesting` package that contains our simulation tools.

### Setting the file path

Next, we specify the path to the rainfall data file and read it in.

```{julia}
filepath = "data/3.txt" # <1>   
rainfall_data = RainfallData(filepath) # <2>
```

1. This is the path to the rainfall data file for the station of interest.
2. This creates a `RainfallData` object containing the rainfall data for the specified station.

If we dig under the hood a bit, we can see that there are two main pieces of information:

- `station_info`: a dictionary containing information about the station, such as its name and location.
- `annual_data`: a dictionary mapping years to `AnnualRainfallData` objects, each containing the date and precipitation data for a given year.

### Plotting the Data

We can plot the data for one or all of the years to verify that it looks correct.

```{julia}
plot(rainfall_data) # <1>
```

1. This `plot` function is defined in [viz.jl](./RainwaterHarvesting/src/viz.jl) and is a thin wrapper around the Plots.jl package.

### Discussion

*After the data-cleaning process, the remaining years are 1985, 2004, 2002, 2001, 2013, 2015, 1991, 1976, 1988, and 2008, representing a substantial 30-year span. Within this timeframe, significant droughts were documented in 1988, 2002, and the extended period from 2012 to 2018. My dataset captures half of the eight critical droughts identified. However, the absence of data from certain major drought years could lead to flawed estimations of resource allocation. This data gap may compromise preparedness for impending droughts and result in severe ecological consequences.*

## Understanding the Theoretical Model

Let's explore the model that simulates the rainwater harvesting system.

### Mass Balance Equation

The mass balance model for the rainwater tank is given by:

$$
V_{t+1} = V_t + Q_t - C_t | 0 \leq V_t \leq V_\text{max}
$$

- $V_t$: the volume of water in the tank at time $t$
- $Q_t$ is the volume of water added to the tank at time $t$
- $C_t$ is the volume of water consumed at time $t$
- $V_\text{max}$: the maximum volume of the tank

### Discussion

*A significant limitation of the model lies in its assumption that water consumption is uniform across all households. To mitigate this shortcoming, a compensatory coefficient (x) can be introduced to reflect variations in usage, thereby enhancing the model's precision.*

### Modified Mass Balance Equation

The mass balance model for the rainwater tank is given by:

$$
V_{t+1} = V_t + Q_t - x*C_t | 0 \leq V_t \leq V_\text{max}
$$

- $V_t$: the volume of water in the tank at time $t$
- $Q_t$ is the volume of water added to the tank at time $t$
- $C_t$ is the volume of water consumed at time $t$
- $V_\text{max}$: the maximum volume of the tank
- $x$: the variations in usage

## Model Implementation and Testing

### Defining the Model Parameters

We can define the model parameters with sensible default values.
You will have the opportunity to change these values later.

```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=42.0,            # <3>
    first_flush_mm=4.0,           # <4>
    tank_capacity_L=16000.0       # <5>
)
```

1. This creates a `ModelParameters` object with the specified parameters.
2. The runoff coefficient ($\eta$) is a measure of how much of the rain that falls on the roof ends up in the tank.
3. The roof area ($A$) is the area of the roof that the rain falls on.
4. The first flush volume ($V_f$) is the volume of rain that is discarded because it is dirty.
5. The tank capacity ($V_\text{max}$) is the maximum volume of the tank.

### Discussion

*Over a span of 49 years, system failures occurred during 13, equating to a reliability rate of 73%. While this level of dependability offers meaningful insight, it underscores room for improvement. Adjustments to the first flush and roof area yielded predominantly favorable outcomes, though some partial failures persisted. A notable constraint of the model is its omission of data from certain drought years. By incorporating additional data points, a more comprehensive and precise model tailored to the conditions in Ceará, Brazil, could be developed. This enhancement would facilitate a more robust analysis, encompassing all significant drought events and enabling superior resource allocation strategies.*

### Running the Simulation for One Year

Let's run the model for the year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

1. We select the annual rainfall data for the year 1981.
2. We run the simulation for the year 1981.
3. We plot the results, again using a `plot` function defined in [viz.jl](./RainwaterHarvesting/src/viz.jl).

To compare rainfall and tank volume:

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```

Observe how the tank's water level responds to rainfall events.
Note any periods when the tank runs dry or overflows.

### Reliability Analysis

We can run simulations for all years, one at a time, and then check how many times the tank runs dry.
You can run simulations for all years at once with the following code:

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

1. We get all the years in order.
2. We run the simulation for each year.
3. We check if any failures occurred.
4. We print the number of years with failures and the total number of years.

### Discussion

*To better reflect the socio-economic and environmental conditions of Ceará, Brazil, modifications were made to the first flush and roof area parameters. In economically disadvantaged regions, houses typically feature reduced roof dimensions. Additionally, the lower standard of water quality necessitates an enlarged first flush system to ensure adequate compensation and filtration.*
